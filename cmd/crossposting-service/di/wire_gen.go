// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"

	firestore2 "cloud.google.com/go/firestore"
	"github.com/google/wire"
	"github.com/planetary-social/nos-crossposting-service/service/adapters"
	"github.com/planetary-social/nos-crossposting-service/service/adapters/firestore"
	"github.com/planetary-social/nos-crossposting-service/service/adapters/memory"
	"github.com/planetary-social/nos-crossposting-service/service/adapters/prometheus"
	"github.com/planetary-social/nos-crossposting-service/service/adapters/pubsub"
	"github.com/planetary-social/nos-crossposting-service/service/app"
	"github.com/planetary-social/nos-crossposting-service/service/config"
	"github.com/planetary-social/nos-crossposting-service/service/domain/notifications"
	"github.com/planetary-social/nos-crossposting-service/service/ports/http"
)

// Injectors from wire.go:

func BuildService(contextContext context.Context, configConfig config.Config) (Service, func(), error) {
	memoryEventWasAlreadySavedCache := adapters.NewMemoryEventWasAlreadySavedCache()
	diBuildTransactionFirestoreAdaptersDependencies := buildTransactionFirestoreAdaptersDependencies{}
	adaptersFactoryFn := newAdaptersFactoryFn(diBuildTransactionFirestoreAdaptersDependencies)
	transactionProvider := firestore.NewTransactionProvider(adaptersFactoryFn)
	logger, err := newLogger(configConfig)
	if err != nil {
		return Service{}, nil, err
	}
	prometheusPrometheus, err := prometheus.NewPrometheus(logger)
	if err != nil {
		return Service{}, nil, err
	}
	saveReceivedEventHandler := app.NewSaveReceivedEventHandler(memoryEventWasAlreadySavedCache, transactionProvider, logger, prometheusPrometheus)
	saveRegistrationHandler := app.NewSaveRegistrationHandler(transactionProvider, logger, prometheusPrometheus)
	getRelaysHandler := app.NewGetRelaysHandler(transactionProvider, prometheusPrometheus)
	getPublicKeysHandler := app.NewGetPublicKeysHandler(transactionProvider, prometheusPrometheus)
	getTokensHandler := app.NewGetTokensHandler(transactionProvider, prometheusPrometheus)
	receivedEventPubSub := pubsub.NewReceivedEventPubSub()
	getEventsHandler := app.NewGetEventsHandler(transactionProvider, receivedEventPubSub, prometheusPrometheus)
	getNotificationsHandler := app.NewGetNotificationsHandler(transactionProvider, prometheusPrometheus)
	getSessionAccountHandler := app.NewGetSessionAccountHandler(transactionProvider, logger, prometheusPrometheus)
	idGenerator := adapters.NewIDGenerator()
	loginOrRegisterHandler := app.NewLoginOrRegisterHandler(transactionProvider, idGenerator, idGenerator, logger, prometheusPrometheus)
	application := app.Application{
		SaveReceivedEvent: saveReceivedEventHandler,
		SaveRegistration:  saveRegistrationHandler,
		GetRelays:         getRelaysHandler,
		GetPublicKeys:     getPublicKeysHandler,
		GetTokens:         getTokensHandler,
		GetEvents:         getEventsHandler,
		GetNotifications:  getNotificationsHandler,
		GetSessionAccount: getSessionAccountHandler,
		LoginOrRegister:   loginOrRegisterHandler,
	}
	server := http.NewServer(configConfig, application, logger)
	metricsServer := http.NewMetricsServer(prometheusPrometheus, configConfig, logger)
	service := NewService(application, server, metricsServer, memoryEventWasAlreadySavedCache)
	return service, func() {
	}, nil
}

func BuildIntegrationService(contextContext context.Context, configConfig config.Config) (IntegrationService, func(), error) {
	memoryEventWasAlreadySavedCache := adapters.NewMemoryEventWasAlreadySavedCache()
	diBuildTransactionFirestoreAdaptersDependencies := buildTransactionFirestoreAdaptersDependencies{}
	adaptersFactoryFn := newAdaptersFactoryFn(diBuildTransactionFirestoreAdaptersDependencies)
	transactionProvider := firestore.NewTransactionProvider(adaptersFactoryFn)
	logger, err := newLogger(configConfig)
	if err != nil {
		return IntegrationService{}, nil, err
	}
	prometheusPrometheus, err := prometheus.NewPrometheus(logger)
	if err != nil {
		return IntegrationService{}, nil, err
	}
	saveReceivedEventHandler := app.NewSaveReceivedEventHandler(memoryEventWasAlreadySavedCache, transactionProvider, logger, prometheusPrometheus)
	saveRegistrationHandler := app.NewSaveRegistrationHandler(transactionProvider, logger, prometheusPrometheus)
	getRelaysHandler := app.NewGetRelaysHandler(transactionProvider, prometheusPrometheus)
	getPublicKeysHandler := app.NewGetPublicKeysHandler(transactionProvider, prometheusPrometheus)
	getTokensHandler := app.NewGetTokensHandler(transactionProvider, prometheusPrometheus)
	receivedEventPubSub := pubsub.NewReceivedEventPubSub()
	getEventsHandler := app.NewGetEventsHandler(transactionProvider, receivedEventPubSub, prometheusPrometheus)
	getNotificationsHandler := app.NewGetNotificationsHandler(transactionProvider, prometheusPrometheus)
	getSessionAccountHandler := app.NewGetSessionAccountHandler(transactionProvider, logger, prometheusPrometheus)
	idGenerator := adapters.NewIDGenerator()
	loginOrRegisterHandler := app.NewLoginOrRegisterHandler(transactionProvider, idGenerator, idGenerator, logger, prometheusPrometheus)
	application := app.Application{
		SaveReceivedEvent: saveReceivedEventHandler,
		SaveRegistration:  saveRegistrationHandler,
		GetRelays:         getRelaysHandler,
		GetPublicKeys:     getPublicKeysHandler,
		GetTokens:         getTokensHandler,
		GetEvents:         getEventsHandler,
		GetNotifications:  getNotificationsHandler,
		GetSessionAccount: getSessionAccountHandler,
		LoginOrRegister:   loginOrRegisterHandler,
	}
	server := http.NewServer(configConfig, application, logger)
	metricsServer := http.NewMetricsServer(prometheusPrometheus, configConfig, logger)
	service := NewService(application, server, metricsServer, memoryEventWasAlreadySavedCache)
	integrationService := IntegrationService{
		Service: service,
	}
	return integrationService, func() {
	}, nil
}

func buildTransactionFirestoreAdapters(client *firestore2.Client, tx *firestore2.Transaction, deps buildTransactionFirestoreAdaptersDependencies) (app.Adapters, error) {
	memoryAccountRepository := memory.NewMemoryAccountRepository()
	memorySessionRepository := memory.NewMemorySessionRepository()
	relayRepository := firestore.NewRelayRepository(client, tx)
	publicKeyRepository := firestore.NewPublicKeyRepository(client, tx)
	registrationRepository := firestore.NewRegistrationRepository(client, tx, relayRepository, publicKeyRepository)
	tagRepository := firestore.NewTagRepository(client, tx)
	eventRepository := firestore.NewEventRepository(client, tx, relayRepository, tagRepository)
	appAdapters := app.Adapters{
		Accounts:      memoryAccountRepository,
		Sessions:      memorySessionRepository,
		Registrations: registrationRepository,
		Relays:        relayRepository,
		PublicKeys:    publicKeyRepository,
		Events:        eventRepository,
		Tags:          tagRepository,
	}
	return appAdapters, nil
}

// wire.go:

type IntegrationService struct {
	Service Service
}

type buildTransactionFirestoreAdaptersDependencies struct {
}

var downloaderSet = wire.NewSet(app.NewDownloader)

var generatorSet = wire.NewSet(notifications.NewGenerator)
